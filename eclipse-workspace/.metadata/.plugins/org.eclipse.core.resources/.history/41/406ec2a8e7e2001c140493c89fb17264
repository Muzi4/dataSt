package week13;

class StackNode {
	int data;
	StackNode link;
}

class LinkedStack {
	StackNode top;
	
	public boolean isEmpty() {
		return(top == null);
	}
	
	public void push(int item) {
		StackNode newNode = new StackNode();
		newNode.data = item;
		newNode.link = top;
		top = newNode;
	}
	
	public int pop() {
		if(isEmpty()) {
			System.out.println("Deleting fail!! Linked Stack is empty");
			return 0;
		} 
		else {
			int item = top.data;
			top = top.link;
			return item;
		}
	}
}
class QNode {
	int data;
	QNode link;
}

class LinkedQueue {
	QNode front;
	QNode rear;
	
	public LinkedQueue() {
		front = null;
		rear = null;
	}
	
	public boolean isEmpty() {
		return(front == rear);
	}
	
	public void enQueue(int item) {
		QNode newNode = new QNode();
		newNode.data = item;
		newNode.link = null;
		if(isEmpty()) {
			front = newNode;
			rear = newNode;
		}
		else {
			rear.link = newNode;
			rear = newNode;
		}
	}
	
	public int deQueue() {
		if(isEmpty()) {
			System.out.println("Deleting fail!!! Linked Queue is empty");
			return 0;
		}
		else {
			int item = front.data;
			front = front.link;
			if(front==null)
				rear = null;
			return item;
		}
	}
}

class GraphNode {
	int vertex;
	GraphNode link;
}

class AdjList {
	private GraphNode head[] = new GraphNode[10];
	private int totalV = 0;
	
	public void insertVertex(int v) {
		totalV++;
	}
	
	public void insertEdge(int v1, int v2) {
		if(v1 >= totalV || v2 >= totalV)
			System.out.println("그래프에 없는 정점입니다.");
		else {
			GraphNode gNode = new GraphNode();
			gNode.vertex = v2;
			gNode.link = head[v1];
			head[v1] = gNode;
		}
	}
	
	public void printAdjList() {
		GraphNode gNode = new GraphNode();
		for(int i = 0; i < totalV; i++) {
			System.out.printf("\n 정점 %c의 인접리스트.", i+65);
			gNode = head[i];
			while(gNode!=null) {
				System.out.printf("->%c", gNode.vertex + 65);
				gNode = gNode.link;
			}
		}
		
	}

public void DFS(int v) {
	GraphNode w = new GraphNode();
	LinkedStack s = new LinkedStack();
	
}

public class GraphSearch {

}
